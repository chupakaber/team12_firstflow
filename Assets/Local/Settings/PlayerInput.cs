//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Local/Settings/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""507186d5-33b8-427b-a0ae-d9e7015476e3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""666cd7b3-f184-4f8b-b8e2-b412904f04d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DebugSpeedX1"",
                    ""type"": ""Button"",
                    ""id"": ""448ef922-7e32-4ec3-9e83-643fbccde9f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugSpeedX2"",
                    ""type"": ""Button"",
                    ""id"": ""2f725d7e-1243-4359-8d35-d5c4d5e2b4a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugSpeedX5"",
                    ""type"": ""Button"",
                    ""id"": ""bdbde444-7482-4405-a7d4-c64cc2d35b86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugSpeedX10"",
                    ""type"": ""Button"",
                    ""id"": ""9c6098c0-6792-4be1-bd01-e5002b4f5b07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugPause"",
                    ""type"": ""Button"",
                    ""id"": ""b1019a55-e658-47b1-9ac6-62bbf361d464"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugReload"",
                    ""type"": ""Button"",
                    ""id"": ""fe81e79d-ccdf-4524-b48d-2c85e48c11c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""KeyboardWASD"",
                    ""id"": ""3da3851a-8839-4c1b-8a01-a84d9840a7cc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4159b9ec-a89d-4a7e-a5e4-7347cd1d8d40"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fe1643f9-e94a-43d1-86be-041adcfd48e9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c59c26d5-844b-4517-b72e-f26d5fa475c9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b5f4215b-bf95-498a-8ec8-708b8cca4265"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""542c6294-f64b-4df6-9e83-cfa203111c36"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugSpeedX1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2667d85a-f218-4f83-ab57-222c8b6017aa"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugSpeedX2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""282529d7-e464-40c4-ab9c-69a5bc22c954"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugSpeedX5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""508ed8b9-38a5-47e0-a749-1461420ba7af"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugSpeedX10"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90ba95d0-d9bb-4ea2-a478-13cda98384c7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11142d39-ffa3-4c21-a9b6-4a8216dda904"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugReload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Movement = m_Default.FindAction("Movement", throwIfNotFound: true);
        m_Default_DebugSpeedX1 = m_Default.FindAction("DebugSpeedX1", throwIfNotFound: true);
        m_Default_DebugSpeedX2 = m_Default.FindAction("DebugSpeedX2", throwIfNotFound: true);
        m_Default_DebugSpeedX5 = m_Default.FindAction("DebugSpeedX5", throwIfNotFound: true);
        m_Default_DebugSpeedX10 = m_Default.FindAction("DebugSpeedX10", throwIfNotFound: true);
        m_Default_DebugPause = m_Default.FindAction("DebugPause", throwIfNotFound: true);
        m_Default_DebugReload = m_Default.FindAction("DebugReload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
    private readonly InputAction m_Default_Movement;
    private readonly InputAction m_Default_DebugSpeedX1;
    private readonly InputAction m_Default_DebugSpeedX2;
    private readonly InputAction m_Default_DebugSpeedX5;
    private readonly InputAction m_Default_DebugSpeedX10;
    private readonly InputAction m_Default_DebugPause;
    private readonly InputAction m_Default_DebugReload;
    public struct DefaultActions
    {
        private @PlayerInput m_Wrapper;
        public DefaultActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Default_Movement;
        public InputAction @DebugSpeedX1 => m_Wrapper.m_Default_DebugSpeedX1;
        public InputAction @DebugSpeedX2 => m_Wrapper.m_Default_DebugSpeedX2;
        public InputAction @DebugSpeedX5 => m_Wrapper.m_Default_DebugSpeedX5;
        public InputAction @DebugSpeedX10 => m_Wrapper.m_Default_DebugSpeedX10;
        public InputAction @DebugPause => m_Wrapper.m_Default_DebugPause;
        public InputAction @DebugReload => m_Wrapper.m_Default_DebugReload;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @DebugSpeedX1.started += instance.OnDebugSpeedX1;
            @DebugSpeedX1.performed += instance.OnDebugSpeedX1;
            @DebugSpeedX1.canceled += instance.OnDebugSpeedX1;
            @DebugSpeedX2.started += instance.OnDebugSpeedX2;
            @DebugSpeedX2.performed += instance.OnDebugSpeedX2;
            @DebugSpeedX2.canceled += instance.OnDebugSpeedX2;
            @DebugSpeedX5.started += instance.OnDebugSpeedX5;
            @DebugSpeedX5.performed += instance.OnDebugSpeedX5;
            @DebugSpeedX5.canceled += instance.OnDebugSpeedX5;
            @DebugSpeedX10.started += instance.OnDebugSpeedX10;
            @DebugSpeedX10.performed += instance.OnDebugSpeedX10;
            @DebugSpeedX10.canceled += instance.OnDebugSpeedX10;
            @DebugPause.started += instance.OnDebugPause;
            @DebugPause.performed += instance.OnDebugPause;
            @DebugPause.canceled += instance.OnDebugPause;
            @DebugReload.started += instance.OnDebugReload;
            @DebugReload.performed += instance.OnDebugReload;
            @DebugReload.canceled += instance.OnDebugReload;
        }

        private void UnregisterCallbacks(IDefaultActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @DebugSpeedX1.started -= instance.OnDebugSpeedX1;
            @DebugSpeedX1.performed -= instance.OnDebugSpeedX1;
            @DebugSpeedX1.canceled -= instance.OnDebugSpeedX1;
            @DebugSpeedX2.started -= instance.OnDebugSpeedX2;
            @DebugSpeedX2.performed -= instance.OnDebugSpeedX2;
            @DebugSpeedX2.canceled -= instance.OnDebugSpeedX2;
            @DebugSpeedX5.started -= instance.OnDebugSpeedX5;
            @DebugSpeedX5.performed -= instance.OnDebugSpeedX5;
            @DebugSpeedX5.canceled -= instance.OnDebugSpeedX5;
            @DebugSpeedX10.started -= instance.OnDebugSpeedX10;
            @DebugSpeedX10.performed -= instance.OnDebugSpeedX10;
            @DebugSpeedX10.canceled -= instance.OnDebugSpeedX10;
            @DebugPause.started -= instance.OnDebugPause;
            @DebugPause.performed -= instance.OnDebugPause;
            @DebugPause.canceled -= instance.OnDebugPause;
            @DebugReload.started -= instance.OnDebugReload;
            @DebugReload.performed -= instance.OnDebugReload;
            @DebugReload.canceled -= instance.OnDebugReload;
        }

        public void RemoveCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnDebugSpeedX1(InputAction.CallbackContext context);
        void OnDebugSpeedX2(InputAction.CallbackContext context);
        void OnDebugSpeedX5(InputAction.CallbackContext context);
        void OnDebugSpeedX10(InputAction.CallbackContext context);
        void OnDebugPause(InputAction.CallbackContext context);
        void OnDebugReload(InputAction.CallbackContext context);
    }
}
